{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/layout/Header.js","components/contacts/EditContact.js","components/pages/About.js","components/pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","Provider","name","email","phone","dispatch","setState","value","this","props","children","Component","Consumer","Contact","showContactInfo","onShowClick","onDeleteClick","className","onClick","style","cursor","float","color","bind","Contacts","Fragment","map","key","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","defaultProps","AddContact","errors","onSubmit","e","preventDefault","uuid","history","push","target","Header","href","branding","to","App","exact","path","component","About","NotFound","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b61da5a2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst Context = React.createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"DELETE_CONTACT\":\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact.id !== action.payload\n        ),\n      };\n    case \"ADD_CONTACT\":\n      return {\n        ...state,\n        contacts: [...state.contacts, action.payload],\n      };\n    default:\n      return state;\n  }\n};\n\nexport class Provider extends Component {\n  state = {\n    contacts: [\n      {\n        id: 1,\n        name: \"Aditya Kannan\",\n        email: \"akannan2@andrew.cmu.edu\",\n        phone: \"425-785-7221\",\n      },\n      {\n        id: 2,\n        name: \"Nithya Kannan\",\n        email: \"hidrnithya@yahoo.com\",\n        phone: \"425-698-8122\",\n      },\n      {\n        id: 3,\n        name: \"Kannan Sundararajan\",\n        email: \"hidrkannan@yahoo.com\",\n        phone: \"425-350-0007\",\n      },\n    ],\n    dispatch: (action) => this.setState((state) => reducer(state, action)),\n  };\n\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport const Consumer = Context.Consumer;\n","import React, { Component } from \"react\";\n// import { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Consumer } from \"../../context\";\n\nclass Contact extends Component {\n  state = {\n    showContactInfo: false,\n  };\n  onShowClick = () => {\n    this.setState({ showContactInfo: !this.state.showContactInfo });\n  };\n  onDeleteClick = (id, dispatch) => {\n    dispatch({ type: \"DELETE_CONTACT\", payload: id });\n  };\n\n  render() {\n    const { contact } = this.props;\n    const { showContactInfo } = this.state;\n\n    return (\n      <Consumer>\n        {(value) => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card card-body mb-3\">\n              <h4>\n                {contact.name}{\" \"}\n                <i\n                  onClick={this.onShowClick}\n                  className=\"fas fa-sort-down\"\n                  style={{ cursor: \"pointer\" }}\n                />\n                <i\n                  className=\"fas fa-times\"\n                  style={{ cursor: \"pointer\", float: \"right\", color: \"red\" }}\n                  onClick={this.onDeleteClick.bind(this, contact.id, dispatch)}\n                ></i>\n                {/* <Link to={`contact/edit/${contact.id}`}>\n                  <i\n                    className=\"fas fa-pencil-alt\"\n                    style={{\n                      cursor: \"pointer\",\n                      float: \"right\",\n                      color: \"black\",\n                      marginRight: \"1rem\",\n                    }}\n                  ></i>\n                </Link> */}\n              </h4>\n              {showContactInfo ? (\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Email: {contact.email}</li>\n                  <li className=\"list-group-item\">Phone: {contact.phone}</li>\n                </ul>\n              ) : null}\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nContact.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\n\nexport default Contact;\n","import React, { Component } from \"react\";\nimport Contact from \"./Contact\";\nimport { Consumer } from \"../../context\";\n\nclass Contacts extends Component {\n  render() {\n    return (\n      <Consumer>\n        {(value) => {\n          const { contacts } = value;\n          return (\n            <React.Fragment>\n              <h1 className=\"display-4 mb-2\">\n                <span className=\"text-danger\">Contact</span> List\n              </h1>\n              {contacts.map((contact) => (\n                <Contact key={contact.id} contact={contact} />\n              ))}\n            </React.Fragment>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default Contacts;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nconst TextInputGroup = ({\n  label,\n  name,\n  value,\n  placeholder,\n  type,\n  onChange,\n  error,\n}) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <input\n        type={type}\n        name={name}\n        className={classnames(\"form-control form-control-lg\", {\n          \"is-invalid\": error,\n        })}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n      />\n      {error && <div className=\"invalid-feedback\">{error}</div>}\n    </div>\n  );\n};\n\nTextInputGroup.propTypes = {\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  error: PropTypes.string.isRequired,\n};\n\nTextInputGroup.defaultProps = {\n  type: \"text\",\n};\n\nexport default TextInputGroup;\n","import React, { Component } from \"react\";\nimport { Consumer } from \"../../context\";\nimport { v4 as uuid } from \"uuid\";\nimport TextInputGroup from \"../layout/TextInputGroup\";\n\nclass AddContact extends Component {\n  state = {\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    errors: {},\n  };\n\n  onSubmit = (dispatch, e) => {\n    e.preventDefault();\n\n    const { name, email, phone } = this.state;\n\n    if (name === \"\") {\n      this.setState({ errors: { name: \"Name is required\" } });\n      return;\n    }\n    if (email === \"\") {\n      this.setState({ errors: { email: \"Email is required\" } });\n      return;\n    }\n    if (phone === \"\") {\n      this.setState({ errors: { phone: \"Phone is required\" } });\n      return;\n    }\n\n    const newContact = {\n      id: uuid(),\n      name,\n      email,\n      phone,\n    };\n\n    dispatch({ type: \"ADD_CONTACT\", payload: newContact });\n\n    this.setState({\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      errors: {},\n    });\n\n    this.props.history.push(\"/\");\n  };\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value });\n\n  render() {\n    const { name, email, phone, errors } = this.state;\n\n    return (\n      <Consumer>\n        {(value) => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header\">Add Contact</div>\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TextInputGroup\n                    label=\"Name\"\n                    name=\"name\"\n                    placeholder=\"Enter Name\"\n                    value={name}\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TextInputGroup\n                    label=\"Email\"\n                    name=\"email\"\n                    placeholder=\"Enter Email\"\n                    value={email}\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TextInputGroup\n                    label=\"Phone\"\n                    name=\"phone\"\n                    placeholder=\"Enter Phone\"\n                    value={phone}\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n                  <input\n                    type=\"submit\"\n                    value=\"Add Contact\"\n                    className=\"btn btn-light btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default AddContact;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = (props) => {\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\n      <div className=\"container\">\n        <a href=\"/\" className=\"navbar-brand\">\n          {props.branding}\n        </a>\n        <div>\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to=\"/\" className=\"nav-link\">\n                <i className=\"fas fa-home\"></i> Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/contact/add\" className=\"nav-link\">\n                <i className=\"fas fa-plus\"></i> Add\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/about\" className=\"nav-link\">\n                <i className=\"fas fa-question\"></i> About\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nHeader.defaultProps = {\n  branding: \"My App\",\n};\n\nHeader.propTypes = {\n  branding: PropTypes.string.isRequired,\n};\n\n// const headingStyle = {\n//   color: \"red\",\n//   fontSize: \"50px\",\n// };\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { Consumer } from \"../../context\";\nimport TextInputGroup from \"../layout/TextInputGroup\";\n\nclass EditContact extends Component {\n  state = {\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    errors: {},\n  };\n\n  // async componentDidMount() {\n  //   const { id } = this.props.match.params;\n  //   const res = await axios.get(\"\");\n  // }\n\n  onSubmit = (dispatch, e) => {\n    e.preventDefault();\n\n    const { name, email, phone } = this.state;\n\n    if (name === \"\") {\n      this.setState({ errors: { name: \"Name is required\" } });\n      return;\n    }\n    if (email === \"\") {\n      this.setState({ errors: { email: \"Email is required\" } });\n      return;\n    }\n    if (phone === \"\") {\n      this.setState({ errors: { phone: \"Phone is required\" } });\n      return;\n    }\n\n    this.setState({\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      errors: {},\n    });\n\n    this.props.history.push(\"/\");\n  };\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value });\n\n  render() {\n    const { name, email, phone, errors } = this.state;\n\n    return (\n      <Consumer>\n        {(value) => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header\">Edit Contact</div>\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TextInputGroup\n                    label=\"Name\"\n                    name=\"name\"\n                    placeholder=\"Enter Name\"\n                    value={name}\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TextInputGroup\n                    label=\"Email\"\n                    name=\"email\"\n                    placeholder=\"Enter Email\"\n                    value={email}\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TextInputGroup\n                    label=\"Phone\"\n                    name=\"phone\"\n                    placeholder=\"Enter Phone\"\n                    value={phone}\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n                  <input\n                    type=\"submit\"\n                    value=\"Update Contact\"\n                    className=\"btn btn-light btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default EditContact;\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <div>\n      <h1 className=\"display-4\">About Contact Manager</h1>\n      <p className=\"lead\">Simple app to manage contacts</p>\n      <p className=\"text-secondary\">Version 1.0.0</p>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <div>\n      <h1 className=\"display-4\">404 Page Not Found</h1>\n      <p className=\"lead\">Sorry, that page does not exist.</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Contacts from \"./components/contacts/Contacts\";\nimport AddContact from \"./components/contacts/AddContact\";\nimport EditContact from \"./components/contacts/EditContact\";\nimport Header from \"./components/layout/Header\";\nimport About from \"./components/pages/About\";\n\nimport { Provider } from \"./context\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport NotFound from \"./components/pages/NotFound\";\n\nfunction App() {\n  return (\n    <Provider>\n      <Router>\n        <div className=\"App\">\n          <Header branding=\"Contact Manager\" />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={Contacts} />\n              <Route exact path=\"/contact/add\" component={AddContact} />\n              {/* <Route exact path=\"/contact/edit/:id\" component={EditContact} /> */}\n              <Route exact path=\"/about\" component={About} />\n              <Route component={NotFound} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}